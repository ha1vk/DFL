#include "html_attr.h"
#include "attribute.h"
#include "html_val.h"
#include "common_val.h"
#include "css_val.h"
#include "css_declaration.h"
#include "docs.h"

using namespace HIRMutate::HTML;
using namespace HIRMutate::COMMON;
using namespace HIRMutate::CSS;

namespace HIRMutate::Attribute
{
    map<string, Value *(*)(void)> aria_attribute_values;
}

void HIRMutate::Attribute::HTML::initialize_html_attributes()
{
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "href", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "ping", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "target", HANDLE(TargetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "hreflang", HANDLE(LangValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "type", HANDLE(MIMETypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "shape", HANDLE(ShapeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "coords", HANDLE(CoordsValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "charset", HANDLE(CharsetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "rel", HANDLE(RelValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "rev", HANDLE(RevValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "href", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "ping", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "alt", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "coords", HANDLE(CoordsValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "hreflang", HANDLE(LangValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "nohref", HANDLE(BooleanValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "rel", HANDLE(RelValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "shape", HANDLE(ShapeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "target", HANDLE(TargetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "autoplay", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "controls", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "currentTime", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "disableRemotePlayback", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "loop", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "muted", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "preload", HANDLE(PreloadValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "src", HANDLE(AudioSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "color", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "face", HANDLE(FontFamilyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "size", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "balance", HANDLE(SignedIntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "loop", HANDLE(SoundLoopValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "volume", HANDLE(SignedIntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "src", HANDLE(AudioSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "cite", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "clear", HANDLE(HIRMutate::HTML::ClearValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "autofocus", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "autocomplete", HANDLE(OnOrOffValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "formaction", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "formenctype", HANDLE(FormEncTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "formmethod", HANDLE(FormMethodValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "formnovalidate", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "formtarget", HANDLE(TargetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "name", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "type", HANDLE(ButtonTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "value", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "height", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "width", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "align", HANDLE(CaptionAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "span", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "align", HANDLE(TableAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "char", HANDLE(CharValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "charoff", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "valign", HANDLE(VAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "width", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "span", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "align", HANDLE(TableAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "char", HANDLE(CharValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "charoff", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "valign", HANDLE(VAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "checked", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "label", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "radiogroup", HANDLE(RadioGroupValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "type", HANDLE(CommandTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "select", HANDLE(ContentSelectValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "value", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "nowrap", HANDLE(YesOrNoValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "cite", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "datetime", HANDLE(DateTimeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "open", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "open", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "compact", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "type", HANDLE(MediaTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "height", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "src", HANDLE(MediaSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "width", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "color", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "face", HANDLE(FontFamilyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "size", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "accept", HANDLE(AcceptValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "accept-charset", HANDLE(CharsetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "autocomplete", HANDLE(AutoCompleteValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "enctype", HANDLE(FormEncTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "method", HANDLE(FormMethodValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "rel", HANDLE(RelValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "novalidate", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "target", HANDLE(TargetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "src", HANDLE(FrameSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "noresize", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "scrolling", HANDLE(ScrollingValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "marginheight", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "marginwidth", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "frameborder", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "cols", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "rows", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "color", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "noshade", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "size", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "width", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "height", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "importance", HANDLE(ImportanceValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "loading", HANDLE(LoadingValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "src", HANDLE(FrameSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "srcdoc", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "width", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "align", HANDLE(ObjectAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "frameborder", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "longdesc", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "marginheight", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "marginwidth", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "scrolling", HANDLE(ScrollingValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "alt", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "align", HANDLE(ObjectAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "decoding", HANDLE(ImageDecodingValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "height", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "importance", HANDLE(ImportanceValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "intrinsicsize", HANDLE(IntrinsicSizeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "ismap", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "loading", HANDLE(LoadingValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "srcset", HANDLE(SrcSetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "src", HANDLE(ImageSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "width", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "usemap", HANDLE(UseMapValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "border", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "hspace", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "longdesc", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "vspace", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "type", HANDLE(InputTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "accept", HANDLE(AcceptValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "align", HANDLE(ObjectAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "alt", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "autocomplete", HANDLE(AutoCompleteValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "autofocus", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "capture", HANDLE(InputCaptureValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "checked", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "formenctype", HANDLE(FormEncTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "formmethod", HANDLE(FormMethodValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "formnovalidate", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "formtarget", HANDLE(TargetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "height", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "inputmode", HANDLE(InputModeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "list", HANDLE(ListValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "max", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "maxlength", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "min", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "minlength", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "multiple", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "pattern", HANDLE(RegexValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "placeholder", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "required", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "size", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "src", HANDLE(ImageSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "step", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "value", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "width", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "incremental", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "autocorrect", HANDLE(OnOrOffValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "results", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "cite", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "datetime", HANDLE(DateTimeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "autofocus", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "challenge", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "keytype", HANDLE(KeyTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "for", HANDLE(LabelForValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "align", HANDLE(CaptionAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "value", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "type", HANDLE(NumberingTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "as", HANDLE(LinkAsValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "href", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "hreflang", HANDLE(LangValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "importance", HANDLE(ImportanceValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "media", HANDLE(MediaQueryValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "rel", HANDLE(RelValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "sizes", HANDLE(SizesValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "target", HANDLE(TargetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "charset", HANDLE(CharsetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "rev", HANDLE(RevValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "behavior", HANDLE(MarqueeBehaviorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "direction", HANDLE(MarqueeDirectionValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "height", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "hspace", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "loop", HANDLE(MarqueeLoopValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "scrollamount", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "scrolldelay", HANDLE(ClockInMsValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "truespeed", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "vspace", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "width", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "label", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "type", HANDLE(MenuTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "checked", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "command", HANDLE(CommandValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "default", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "icon", HANDLE(ImageSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "label", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "radiogroup", HANDLE(RadioGroupValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "type", HANDLE(MenuItemTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "charset", HANDLE(CharsetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "content", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "scheme", HANDLE(MetaSchemeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "value", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "min", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "max", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "low", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "high", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "optimum", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "archive", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "border", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "classid", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "codebase", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "codetype", HANDLE(AcceptValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "data", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "declare", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "height", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "standby", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "type", HANDLE(MediaTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "typemustmatch", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "usemap", HANDLE(UseMapValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "width", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "reversed", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "start", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "type", HANDLE(NumberingTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "label", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "label", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "selected", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "value", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "for", HANDLE(ElementIDListValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "name", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "type", HANDLE(MediaTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "value", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "valuetype", HANDLE(ParamValueTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "cols", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "width", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "wrap", HANDLE(WrapValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "max", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "value", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "cite", HANDLE(DummyUrlValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "autocomplete", HANDLE(AutoCompleteValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "autofocus", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "multiple", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "required", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "size", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "src", HANDLE(ImageSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "srcset", HANDLE(SrcSetValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "datetime", HANDLE(DateTimeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "align", HANDLE(AlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "border", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "cellpadding", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "cellspacing", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "frame", HANDLE(TableFrameValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "rules", HANDLE(TableRulesValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "summary", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "width", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "align", HANDLE(TableAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "char", HANDLE(CharValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "charoff", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "valign", HANDLE(VAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "abbr", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "align", HANDLE(TableAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "axis", HANDLE(TableAxisValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "char", HANDLE(CharValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "charoff", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "colspan", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "headers", HANDLE(TableHeadersValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "height", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "rowspan", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "scope", HANDLE(TableScopeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "valign", HANDLE(VAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "width", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "autocomplete", HANDLE(AutoCompleteValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "autofocus", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "cols", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "disabled", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "form", HANDLE(FormValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "maxlength", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "minlength", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "placeholder", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "readonly", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "required", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "rows", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "spellcheck", HANDLE(BooleanValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "wrap", HANDLE(WrapValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "align", HANDLE(TableAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "char", HANDLE(CharValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "charoff", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "valign", HANDLE(VAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "abbr", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "align", HANDLE(TableAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "axis", HANDLE(TableAxisValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "char", HANDLE(CharValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "charoff", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "colspan", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "headers", HANDLE(TableHeadersValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "height", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "rowspan", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "scope", HANDLE(TableScopeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "valign", HANDLE(VAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "width", HANDLE(LengthPercentageValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "align", HANDLE(TableAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "char", HANDLE(CharValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "charoff", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "valign", HANDLE(VAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "align", HANDLE(TableAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "bgcolor", HANDLE(ColorValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "char", HANDLE(CharValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "charoff", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "valign", HANDLE(VAlignValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "default", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "kind", HANDLE(TrackKindValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "label", HANDLE(StringValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "src", HANDLE(TrackSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "srclang", HANDLE(LangValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "compact", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "type", HANDLE(UListTypeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "autoplay", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "autoPictureInPicture", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "controls", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "controlslist", HANDLE(VideoControlsListValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "currentTime", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "disablePictureInPicture", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "disableRemotePlayback", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "height", HANDLE(IntegerValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "intrinsicsize", HANDLE(IntrinsicSizeValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "loop", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "muted", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "playsinline", HANDLE(EmptyValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "poster", HANDLE(ImageSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "preload", HANDLE(PreloadValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "src", HANDLE(VideoSrcValue)));
    add_regular_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "width", HANDLE(IntegerValue)));

    //global attributes
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDOElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBRElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIFrameElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMetaElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParamElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTitleElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "accesskey", HANDLE(CharValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "autocapitalize", HANDLE(AutoCapitalizeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "class", HANDLE(ClassValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "contenteditable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "contextmenu", HANDLE(ContextMenuValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "dir", HANDLE(DirValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "draggable", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "webkitdropzone", HANDLE(DropZoneValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "hidden", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "inputmode", HANDLE(InputModeValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "itemid", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "itemgroup", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "itemref", HANDLE(ElementIDValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "itemscope", HANDLE(EmptyValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "itemtype", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "lang", HANDLE(LangValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "part", HANDLE(PartValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "slot", HANDLE(SlotValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "spellcheck", HANDLE(BooleanValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "style", HANDLE(CSSStyleDeclarationValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "tabindex", HANDLE(TabIndexValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "title", HANDLE(StringValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "translate", HANDLE(YesOrNoValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAnchorElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAbbrElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAcronymElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAddressElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAreaElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLArticleElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAsideElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "onabort", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "onerror", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLAudioElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBaseFontElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBDIElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBgSoundElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBigElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLBlockQuoteElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLButtonElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCanvasElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableCaptionElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCenterElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCiteElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCodeElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableColGroupElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLCommandElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLContentElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDataListElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDDElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDelElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDetailsElement", "ontoggle", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDFNElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "oncancel", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "onclose", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDialogElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDirectoryElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDivElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDListElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLDTElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEMElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLEmbedElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFieldSetElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigCaptionElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFigureElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFontElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFooterElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "onreset", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFormElement", "onsubmit", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLFrameSetElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading1Element", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading2Element", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading3Element", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading4Element", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading5Element", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeading6Element", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHeaderElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHGroupElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLHRElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "onabort", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "onerror", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLImageElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "onchange", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "onerror", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "oninput", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "oninvalid", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "onsearch", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInputElement", "onselect", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLInsElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLIsIndexElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKBDElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLKeygenElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLabelElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLegendElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLIElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "onerror", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLLinkElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLListingElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMainElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMapElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarkElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMarqueeElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuElement", "onshow", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMenuItemElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLMeterElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLNavElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "onabort", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "onerror", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLObjectElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOListElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptGroupElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOptionElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLOutputElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLParagraphElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPictureElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPlainTextElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLPreElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLProgressElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLQElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRPElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRTElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLRubyElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSlotElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSampElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSectionElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "onchange", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "oninput", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSelectElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLShadowElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSmallElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSourceElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSpanElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrikeElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLStrongElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSubElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSummaryElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLSupElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTimeElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTBodyElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableDataCellElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTemplateElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "onchange", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "oninput", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTextAreaElement", "onselect", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTFootElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableHeaderCellElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTHeadElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTableRowElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "oncuechange", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTrackElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLTTElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLUListElement", "onscroll", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVarElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "onabort", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "onerror", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLVideoElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLWBRElement", "onfocusout", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "onblur", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "onclick", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "onfocus", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "onfocusin", HANDLE(CallEventHandlerValue)));
    add_global_attribute(std::make_shared<AttributeTemplate>("HTMLXMPElement", "onfocusout", HANDLE(CallEventHandlerValue)));

    //aria_attribute_values
    ARIA_ATTRIBUTE_VALUES("aria-activedescendant", HANDLE(ElementIDValue))
    ARIA_ATTRIBUTE_VALUES("aria-atomic", HANDLE(BooleanValue))
    ARIA_ATTRIBUTE_VALUES("aria-autocomplete", HANDLE(AriaAutocompleteValue))
    ARIA_ATTRIBUTE_VALUES("aria-busy", HANDLE(BooleanValue))
    ARIA_ATTRIBUTE_VALUES("aria-checked", HANDLE(AriaCheckedValue))
    ARIA_ATTRIBUTE_VALUES("aria-colcount", HANDLE(IntegerValue))
    ARIA_ATTRIBUTE_VALUES("aria-colindex", HANDLE(IntegerValue))
    ARIA_ATTRIBUTE_VALUES("aria-colspan", HANDLE(IntegerValue))
    ARIA_ATTRIBUTE_VALUES("aria-controls", HANDLE(ElementIDValue))
    ARIA_ATTRIBUTE_VALUES("aria-current", HANDLE(AriaCurrentValue))
    ARIA_ATTRIBUTE_VALUES("aria-describedby", HANDLE(ElementIDValue))
    ARIA_ATTRIBUTE_VALUES("aria-details", HANDLE(ElementIDValue))
    ARIA_ATTRIBUTE_VALUES("aria-disabled", HANDLE(BooleanValue))
    ARIA_ATTRIBUTE_VALUES("aria-dropeffect", HANDLE(AriaDropeffectValue))
    ARIA_ATTRIBUTE_VALUES("aria-errormessage", HANDLE(ElementIDValue))
    ARIA_ATTRIBUTE_VALUES("aria-expanded", HANDLE(BooleanValue))
    ARIA_ATTRIBUTE_VALUES("aria-flowto", HANDLE(ElementIDValue))
    ARIA_ATTRIBUTE_VALUES("aria-grabbed", HANDLE(AriaGrabbedValue))
    ARIA_ATTRIBUTE_VALUES("aria-haspopup", HANDLE(AriaHaspopupValue))
    ARIA_ATTRIBUTE_VALUES("aria-hidden", HANDLE(AriaHiddenValue))
    ARIA_ATTRIBUTE_VALUES("aria-invalid", HANDLE(AriaInvalidValue))
    ARIA_ATTRIBUTE_VALUES("aria-label", HANDLE(AriaLabelValue))
    ARIA_ATTRIBUTE_VALUES("aria-labelledby", HANDLE(ElementIDValue))
    ARIA_ATTRIBUTE_VALUES("aria-level", HANDLE(IntegerValue))
    ARIA_ATTRIBUTE_VALUES("aria-live", HANDLE(AriaLiveValue))
    ARIA_ATTRIBUTE_VALUES("aria-modal", HANDLE(BooleanValue))
    ARIA_ATTRIBUTE_VALUES("aria-multiline", HANDLE(BooleanValue))
    ARIA_ATTRIBUTE_VALUES("aria-multiselectable", HANDLE(BooleanValue))
    ARIA_ATTRIBUTE_VALUES("aria-orientation", HANDLE(AriaOrientationValue))
    ARIA_ATTRIBUTE_VALUES("aria-owns", HANDLE(ElementIDValue))
    ARIA_ATTRIBUTE_VALUES("aria-placeholder", HANDLE(StringValue))
    ARIA_ATTRIBUTE_VALUES("aria-posinset", HANDLE(IntegerValue))
    ARIA_ATTRIBUTE_VALUES("aria-pressed", HANDLE(AriaPressedValue))
    ARIA_ATTRIBUTE_VALUES("aria-readonly", HANDLE(BooleanValue))
    ARIA_ATTRIBUTE_VALUES("aria-relevant", HANDLE(AriaRelevantValue))
    ARIA_ATTRIBUTE_VALUES("aria-required", HANDLE(BooleanValue))
    ARIA_ATTRIBUTE_VALUES("aria-roledescription", HANDLE(StringValue))
    ARIA_ATTRIBUTE_VALUES("aria-rowcount", HANDLE(IntegerValue))
    ARIA_ATTRIBUTE_VALUES("aria-rowindex", HANDLE(IntegerValue))
    ARIA_ATTRIBUTE_VALUES("aria-rowspan", HANDLE(IntegerValue))
    ARIA_ATTRIBUTE_VALUES("aria-selected", HANDLE(AriaSelectedValue))
    ARIA_ATTRIBUTE_VALUES("aria-setsize", HANDLE(IntegerValue))
    ARIA_ATTRIBUTE_VALUES("aria-sort", HANDLE(AriaSortValue))
    ARIA_ATTRIBUTE_VALUES("aria-valuemax", HANDLE(NumberValue))
    ARIA_ATTRIBUTE_VALUES("aria-valuemin", HANDLE(NumberValue))
    ARIA_ATTRIBUTE_VALUES("aria-valuenow", HANDLE(NumberValue))
    ARIA_ATTRIBUTE_VALUES("aria-valuetext", HANDLE(StringValue))
    ARIA_ATTRIBUTE_VALUES("role", HANDLE(RoleValue))

    std::for_each(DOC::html_elements.begin(), DOC::html_elements.end(),
                  [](string &elem)
                  {
                      std::for_each(aria_attribute_values.begin(), aria_attribute_values.end(),
                                    [&elem](map<string, Value *(*)(void)>::reference e)
                                    {
                                        add_aria_attribute(std::make_shared<AttributeTemplate>(elem.c_str(), e.first.c_str(), e.second));
                                    });
                  });
}